AWS 고정 IP 설정하고나서 서버 종료시 과금 시작

02. AWS, MySql1_20191024_02
	- AWS 관련 적용
		--> pyenv.sh의 명령 내용 설명
	- 서버에서의 기본 셋팅 설명
03. AWS, MySql1_20191024_03
	- MYSQL AWS 설치 및 PC 와 연결
04. AWS, MySql1_20191024_04
	- 리눅스 용어 정리, About DB.pdf 설명
01. Mysql_01
	- SQL vs NO-SQL  설명

# AWS, MYSQL install Summary
	- AWS, Amazon Web Server : 클라우드 서비스, 웹 제어 가능 서버 대여 시스템?
		- EC2 서버, Elastic Compute Cloud : AWS상에서 사용하는 Server
		+ 약간 VMWARE 웹버전?, 공공 PC

		1. 해당 웹 가입 및 서버 설정
			* 주의 사항) 고정 IP 설정해 두었는데 이 상태에서 서버 종료시 과금
			+ 외부 접속 비밀번호 ~/.ssh/dss.pem
			- 파일 전송 툴 Cyberduck/ FileZila
			- 접속: ssh -i ~/.ssh/dss.pem ubuntu@<public ip 주소>

		2. 서버에 pyenv라는 가상환경에서 작업하게 될 것임
			+ 필요 패키지 파일은 requirments.txt, pyenv.sh에 정의
			+ pyenv: 파이썬 가상 개발 환경
				왜?: 사용하는 툴마다 지원하거나 지원하지 않는 파이썬 버전들이 존재
					이를 맞춰주기위해 각각 다른 가상환경을 만들어서 각각 개발 필요성 발생
			- 접속: prenv activate python3
				+ ~/python3 : 폴더에 접속하면 .env 파일이 자동으로 가상환경으로 접속하도록 설정

		2-1. jupyter notebook
			실행은 이전과 동일/ 외부 아이피:8888로 접속 가능

		3. mysql 설치( port: 3306 )
			- 접속: mysql -u root -p
			- 나가기: exit
			- 툴 HeidiSQL

# MYSQL Summary
	* SQL문
	01. SHOW : 속성값 표출
		SHOW DATABASES;
		SHOW VARIABLES like "character_set_database";

	02. ALTER : 테이블의 속성 & 값 변경시
		ALTER DATABASE test CHARACTER SET = utf8
		ALTER TABLE user2 ADD tmp TEXT;
		ALTER TABLE user2 MODIFY COLUMN tmp INT(3);
		ALTER TABLE user2 DROP tmp

	03. DROP: 테이블 DB 및 테이블 삭제 시
		DROP DATABASE tmp;
		DROP TABLE tmp;

	04. INSERT
		INSERT INTO user1(user_id, name, email, age, rdate)
		VALUES (1, "jin", "pdj@gmail.com", 30, now()),
			(2, "peter", "peter@daum.net", 33, '2017-02-20'),
			(3, "alice", "alice@naver.com", 23, '2018-01-05'),
			(4, "po", "po@gmail.com", 43, '2002-09-16'),
			(5, "andy", "andy@gmail.com", 17, '2016-04-28'),
			(6, "jin", "jin1224@gmail.com", 33, '2013-09-02');

	05. SELECT
		가. OREDER BY "열" ASC/ DESC
		나. WHERE 절: from 까지 계산된 데이터에 조건을 걸어 줄때
			- LIKE : 문자의 일부분을 조건으로 줄떄
			- IN : 한 컬럼의 여러개 데이터를 조건으로 할때

	06. UPDATE
		UPDATE <table_name>
		SET <column_name_1> = <value_1>, <column_name_2> = <value_2>,
		WHERE <condition>

	07. DELETE
		DELETE FROM <table_name>
		WHERE <condition>

	+ 다양한 함수들
		- COUNT : 테이블에 몇개의 데이터가 있는지, Group by와 같이 활용
		- DISTINCT : 뚜렷하게 구분되는 ,컬럼의 중복된 데이터를 제거 할때
		- CONCAT : 컬럼의 데이터들을 합쳐서 새로운 컬럼으로 보여줄때
			ex) SELECT email, CONCAT(name, "(", age, ")") AS "name_age" FROM user1
		- BETWEEN A AND B : 조건 A < B
		- LIMIT : 제한
			select * from USER1 limit 3;
				-> 3개로 제한
			select * from USER1 limit 2,2;
				-> 2번째 부터 2개를 표출 ex) 3,4 만 나옴
+
	명령어
		- echo
		- source
		- history
			list의 명령중 다시 사용하고 싶으면 "!줄번호"
		- 벡그라운드 실행
			실행 명령 뒤에 &
		- ps -e| grep '프로세스 명'
		- kill -9 '프로세스 번호'
		- tmux, terminal multiplexer:
			- window 와 session단위로 관리하는 도구
			- 하나의 창이 아닌 여러 창을 함께 사용을 위해
			tmux new -s '세션 명' : 새로운 세션 생성
			tmux new -s '세션 명' -n 'window name' : 새로운 세션 생성
			tmux ls : 세션 목록
			tmux kill-session -t '세션 넘버' : 특정세션 강제 종료
			tmux attach -t '세션명' : 세션 다시 불러오기, 세션 접속
			exit: 세션 종료

			(ctrl + b) d : 세션 중단
			(ctrl + b) % : 듀얼 디스플레이
			(ctrl + b) 방향키 : 듀얼 디스플레이 이동
			(ctrl + b) c : 새 윈도우 생성
			(ctrl + b) 세션 넘버 : 윈도우 이동

	단어
		continent 대륙
